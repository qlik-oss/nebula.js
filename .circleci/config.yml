version: 2

aliases:
  - &restore_yarn_cache
    name: Restore yarn cache
    keys:
      - yarn-packages-v2-{{ checksum "yarn.lock" }}
  - &save_yarn_cache
    name: Save yarn cache
    paths:
      - ~/.cache/yarn
      - ./node_modules
      - ./apis/locale/node_modules
      - ./apis/stardust/node_modules
      - ./apis/nucleus/node_modules
      - ./commands/sense/node_modules
      - ./commands/build/node_modules
      - ./commands/serve/node_modules
      - ./commands/create/node_modules
    key: yarn-packages-v2-{{ checksum "yarn.lock" }}
  - &filter_master
    branches:
      only: master
  - &attach
    at: ~/project

jobs:
  build:
    docker:
      - image: circleci/node:12.15.0
      - image: qlikcore/engine:12.961.0
        command: |
          -S AcceptEULA=yes
          -S SSEPlugin=sse,localhost:50051
      - image: browserless/chrome:1.44.0-puppeteer-1.20.0

    working_directory: ~/project

    steps:
      - checkout
      # start the SSE plugin as early as possible so that the engine
      # image has enough time to connect to it before tests are run
      - run:
          name: Initiate SSE plugin
          command: |
            cd test/fixtures/sse
            echo "{}" > package.json
            npm install qlik-sse@0.3.0 --no-package-lock
            rm package.json
            node start.js
          background: true

      - restore_cache: *restore_yarn_cache

      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn

      - save_cache: *save_yarn_cache
      - run:
          name: Build
          command: yarn run build
      - run:
          name: Lint
          command: yarn run lint
      - run:
          name: Locale
          command: yarn run locale:verify
      - run:
          name: Unit tests
          command: |
            yarn run test:unit --mocha.bail false --mocha.reporter mocha-junit-reporter --mocha.reporterOptions.mochaFile ./coverage/junit/junit.xml
            if [ ! -z "$COVERALLS_REPO_TOKEN" ]; then
              echo "Uploading coverage results to coveralls.io..."
              cat ./coverage/unit/lcov.info | npx coveralls
            fi
      - store_test_results:
          path: coverage/junit
      - run:
          name: Import app
          command: |
            DocId=$(curl -s --data-binary @commands/serve/data/apps/ctrl00.qvf http://localhost:9076/v1/apps/import | jq -r '.attributes.id')
            echo "export DOC_ID=$DocId" >> $BASH_ENV
      - run:
          name: Test component
          command: yarn run test:component --chrome.browserWSEndpoint "ws://localhost:3000" --no-launch
      - run:
          name: Test mashup
          command: yarn run test:mashup --chrome.browserWSEndpoint "ws://localhost:3000" --no-launch
      - run:
          name: Test integration
          command: APP_ID=$DOC_ID yarn run test:integration --chrome.browserWSEndpoint "ws://localhost:3000" --no-launch
      # - run:
      #     name: Create a hello supernova project from latest release
      #     command: |
      #       set -e
      #       npx nebula create temp/hello --pkgm yarn --picasso none
      #       cd temp/hello
      #       APP_ID=$DOC_ID yarn run test:integration --chrome.browserWSEndpoint "ws://localhost:3000" --no-launch
      #- run:
      #    name: Create a picasso barchart supernova project from current commit
      #    command: |
      #      set -e
      #      ./commands/cli/lib/index.js create generated/barchart --picasso barchart --no-install
      #      echo "Yarn"
      #      yarn
      #      echo "Linking packages"
      #      npx lerna link --force-local
      #      cd generated/barchart
      #      echo "Log node_modules/@nebula.js"
      #      ls -la node_modules/@nebula.js
      #      yarn run build
      #      APP_ID=$DOC_ID yarn run test:integration --mocha.timeout 30000 --chrome.browserWSEndpoint "ws://localhost:3000" --no-launch
      - store_artifacts:
          path: generated/barchart/screenshots
      - store_artifacts:
          path: test/mashup/__artifacts__
  api-governance:
    machine: true
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Login for Docker
          command: echo $DOCKER_TOKEN | docker login -u "$DOCKER_USER" --password-stdin
      - run:
          name: API Governance Compliance
          command: |
            docker pull qlik/asmquery
            docker create -v /specs --name specs alpine:3.4 /bin/true
            docker cp ./apis/stardust/api-spec/spec.json specs:/specs
            docker run --volumes-from specs -e target=Colony -e runMode=failBuild -e apiId=abdc47c2-921a-45d3-ba5c-80d448574c5b -e specPath='/specs/spec.json' -e commit="$CIRCLE_SHA1" qlik/asmquery
workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          filters:
            tags:
              only:
                - /v.*/
      - api-governance:
          filters:
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/
            tags:
              only:
                - /v.*/
