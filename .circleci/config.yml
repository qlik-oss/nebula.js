version: 2.1

aliases:
  - &restore_yarn_cache
    name: Restore yarn cache
    keys:
      - yarn-packages-v2-{{ checksum "yarn.lock" }}
  - &save_yarn_cache
    name: Save yarn cache
    paths:
      - ~/.cache/yarn
      - ./node_modules
      - ./apis/locale/node_modules
      - ./apis/stardust/node_modules
      - ./apis/nucleus/node_modules
      - ./commands/sense/node_modules
      - ./commands/build/node_modules
      - ./commands/serve/node_modules
      - ./commands/create/node_modules
    key: yarn-packages-v2-{{ checksum "yarn.lock" }}
  - &filter_master
    branches:
      only: master
  - &attach
    at: ~/project

commands:
  nebula_create:
    description: 'Create Nebula visualization project'
    parameters:
      project_name:
        type: string
        description: 'Project name'
      picasso_template:
        type: string
        description: 'Picasso template'
        default: 'none'
      mashup:
        type: boolean
        default: false
      install:
        type: boolean
        default: false
        description: 'Run package installation step'
      build:
        type: boolean
        default: true
        description: 'Build project'
      test:
        type: boolean
        default: true
        description: 'Run tests'
    steps:
      - run:
          name: 'Create Nebula visualization project: <<# parameters.mashup >>Mashup<</ parameters.mashup >><<^ parameters.mashup >>Picasso template "<< parameters.picasso_template >>" <</ parameters.mashup >> in << parameters.project_name >>'
          command: |
            set -e
            <<# parameters.mashup >>
              echo "Create mashup project"
              ./commands/cli/lib/index.js create mashup << parameters.project_name >> --install << parameters.install >> --pkgm yarn
            <</ parameters.mashup >>
            <<^ parameters.mashup >>
              echo "Create project based on Picasso template"
              ./commands/cli/lib/index.js create << parameters.project_name >> --picasso << parameters.picasso_template >> --install << parameters.install >> --pkgm yarn
            <</ parameters.mashup >>
            echo "Yarn"
            yarn
            echo "Linking packages"
            (cd apis/stardust && yarn link)
            (cd commands/cli && yarn link)
            (cd commands/build && yarn link)
            (cd commands/serve && yarn link)
            cd << parameters.project_name >>
            yarn link "@nebula.js/stardust"
            yarn link "@nebula.js/cli"
            yarn link "@nebula.js/cli-build"
            yarn link "@nebula.js/cli-serve"
            echo "Log node_modules/@nebula.js"
            ls -la node_modules/@nebula.js
            <<# parameters.build >> yarn run build <</ parameters.build >>
            <<# parameters.test >>  yarn run test:e2e <</ parameters.test >>
jobs:
  validate:
    docker:
      - image: cimg/node:20.5.0
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Locale
          command: yarn run locale:verify
      - run:
          name: Lint
          command: yarn run lint
      - run:
          name: Run unit tests and publish to codeclimate
          command: |
            ./test/bin/cc-test-reporter before-build
            yarn test:unit --coverage --reporters=default --reporters=jest-junit
            ./test/bin/cc-test-reporter after-build --coverage-input-type lcov --exit-code $?
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./coverage/junit/
      - store_test_results:
          path: coverage/junit

  build:
    docker:
      - image: cimg/node:20.5.0

    working_directory: ~/project
    resource_class: large

    steps:
      - checkout
      - restore_cache: *restore_yarn_cache
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache: *save_yarn_cache
      - run:
          name: Build
          command: yarn run build
      - store_artifacts:
          path: package.json
      - persist_to_workspace:
          root: ~/project
          paths:
            - .

  test-integration:
    docker:
      - image: cimg/node:20.5.0
      - image: browserless/chrome:1-puppeteer-7.1.0

    working_directory: ~/project
    resource_class: large

    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Test component
          command: yarn run test:component --chrome.browserWSEndpoint "ws://localhost:3000" --no-launch
      - run:
          name: Test mashup
          command: yarn run test:mashup --chrome.browserWSEndpoint "ws://localhost:3000" --no-launch
      - run:
          name: Test integration
          command: yarn run test:integration --chrome.browserWSEndpoint "ws://localhost:3000" --no-launch
      - run: npx playwright install --with-deps chromium
      - run:
          name: Test rendering
          command: yarn run test:rendering
      - store_test_results:
          path: ./test/rendering/reports/xml/report.xml
      - store_artifacts:
          path: ./test/rendering
      - store_artifacts:
          path: ./test/rendering/reports/html

  test-create:
    docker:
      - image: cimg/node:20.5.0
      - image: browserless/chrome:1-puppeteer-7.1.0

    working_directory: ~/project
    resource_class: large

    steps:
      - attach_workspace:
          at: ~/project
      - run: npx playwright install --with-deps chromium
      - nebula_create:
          project_name: 'generated/hello'
          picasso_template: 'none'
          build: true
          test: true
      - nebula_create:
          project_name: generated/barchart
          picasso_template: 'barchart'
          build: true
          test: true
      - nebula_create:
          project_name: 'hello-mashup'
          mashup: true
          install: true
          build: true
          test: false
      - store_artifacts:
          path: generated/barchart/screenshots
      - store_artifacts:
          path: test/mashup/__artifacts__

  api-governance:
    machine:
      image: ubuntu-2004:current
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Create version.txt
          command: |
            set -x
            if [ -n "${CIRCLE_TAG}" ]; then
              version=${CIRCLE_TAG#v}
            else
              yarn workspace "@nebula.js/stardust" version --prepatch --no-git-tag-version
              version=$(node -p "require('./apis/stardust/api-spec/spec.json').info.version")
            fi
            echo "$version" > ./version.txt
            echo "Building $version"
      - run:
          name: Prepare API Compliance
          command: |
            docker pull ghcr.io/qlik-download/api-compliance
            docker create -v /specs --name specs alpine:3.4 /bin/true
            docker cp ./apis/stardust/api-spec/spec.json specs:/specs
            docker cp ./apis/stardust/api-spec/listbox-spec.json specs:/specs

      - run:
          name: Run API Compliance
          command: >
            VER=v$(cat version.txt)

            docker run --volumes-from specs
            -e SPEC_PATHS="abdc47c2-921a-45d3-ba5c-80d448574c5b@/specs/spec.json,ba0bcf91-d7a6-4048-a36a-ad9a2dc8c03e@/specs/listbox-spec.json"
            -e COMMIT_SHA="$CIRCLE_SHA1"
            -e RELEASE_TAG="$VER"
            -e PRE_RELEASE="true"
            -e CREDENTIALS_S3_SECRETKEY="$APICULTURIST_S3"
            -e CREDENTIALS_GITHUB="$APICULTURIST_GITHUB"
            -e CREDENTIALS_COLONY="$APICULTURIST_TOKEN"
            ghcr.io/qlik-download/api-compliance

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          filters:
            tags:
              only:
                - /v.*/
      - validate:
          requires:
            - build
      - test-integration:
          requires:
            - build
      - test-create:
          requires:
            - build
      - api-governance:
          context: api-compliance
          requires:
            - build
          filters:
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/
            tags:
              only:
                - /v.*/
