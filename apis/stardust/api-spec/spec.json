{
  "scriptappy": "1.0.0",
  "info": {
    "name": "@nebula.js/stardust",
    "description": "Product and framework agnostic integration API for Qlik's Associative Engine",
    "version": "1.1.1",
    "license": "MIT",
    "stability": "stable"
  },
  "entries": {
    "embed": {
      "description": "Initiates a new `Embed` instance using the specified enigma `app`.",
      "kind": "function",
      "params": [
        {
          "name": "app",
          "type": "enigma.Doc"
        },
        {
          "name": "instanceConfig",
          "optional": true,
          "type": "#/definitions/Configuration"
        }
      ],
      "returns": {
        "type": "#/definitions/Embed"
      },
      "examples": ["import { embed } from '@nebula.js/stardust'\nconst n = embed(app);\nn.render({ id: 'abc' });"],
      "entries": {
        "createConfiguration": {
          "description": "Creates a new `embed` scope bound to the specified `configuration`.\n\nThe configuration is merged with all previous scopes.",
          "kind": "function",
          "params": [
            {
              "name": "configuration",
              "description": "The configuration object",
              "type": "#/definitions/Configuration"
            }
          ],
          "returns": {
            "type": "#/entries/embed"
          },
          "examples": [
            "import { embed } from '@nebula.js/stardust';\n// create a 'master' config which registers all types\nconst m = embed.createConfiguration({\n  types: [{\n    name: 'mekko',\n    version: '1.0.0',\n    load: () => Promise.resolve(mekko)\n  }],\n});\n\n// create an alternate config with dark theme\n// and inherit the config from the previous\nconst d = m.createConfiguration({\n theme: 'dark'\n});\n\nm(app).render({ type: 'mekko' }); // will render the object with default theme\nd(app).render({ type: 'mekko' }); // will render the object with 'dark' theme\nembed(app).render({ type: 'mekko' }); // will throw error since 'mekko' is not a register type on the default instance"
          ]
        }
      }
    },
    "useState": {
      "description": "Creates a stateful value.",
      "templates": [
        {
          "name": "S"
        }
      ],
      "kind": "function",
      "params": [
        {
          "name": "initialState",
          "description": "The initial state.",
          "kind": "union",
          "items": [
            {
              "type": "S"
            },
            {
              "kind": "function",
              "params": [],
              "returns": {
                "type": "S"
              }
            }
          ]
        }
      ],
      "returns": {
        "description": "The value and a function to update it.",
        "kind": "array",
        "items": [
          {
            "type": "S"
          },
          {
            "type": "#/definitions/SetStateFn",
            "generics": [
              {
                "type": "S"
              }
            ]
          }
        ]
      },
      "examples": [
        "import { useState } from '@nebula.js/stardust';\n// ...\n// initiate with simple primitive value\nconst [zoomed, setZoomed] = useState(false);\n\n// update\nsetZoomed(true);\n\n// lazy initiation\nconst [value, setValue] = useState(() => heavy());"
      ]
    },
    "useEffect": {
      "description": "Triggers a callback function when a dependent value changes.",
      "kind": "function",
      "params": [
        {
          "name": "effect",
          "description": "The callback.",
          "type": "#/definitions/EffectCallback"
        },
        {
          "name": "deps",
          "description": "The dependencies that should trigger the callback.",
          "optional": true,
          "kind": "array",
          "items": {
            "type": "any"
          }
        }
      ],
      "examples": [
        "import { useEffect } from '@nebula.js/stardust';\n// ...\nuseEffect(() => {\n  console.log('mounted');\n  return () => {\n    console.log('unmounted');\n  };\n}, []);"
      ]
    },
    "useMemo": {
      "description": "Creates a stateful value when a dependent changes.",
      "templates": [
        {
          "name": "T"
        }
      ],
      "kind": "function",
      "params": [
        {
          "name": "factory",
          "description": "The factory function.",
          "kind": "function",
          "params": [],
          "returns": {
            "type": "T"
          }
        },
        {
          "name": "deps",
          "description": "The dependencies.",
          "kind": "array",
          "items": {
            "type": "any"
          }
        }
      ],
      "returns": {
        "description": "The value returned from the factory function.",
        "type": "T"
      },
      "examples": [
        "import { useMemo } from '@nebula.js/stardust';\n// ...\nconst v = useMemo(() => {\n  return doSomeHeavyCalculation();\n}), []);"
      ]
    },
    "usePromise": {
      "description": "Runs a callback function when a dependent changes.",
      "templates": [
        {
          "name": "P"
        }
      ],
      "kind": "function",
      "params": [
        {
          "name": "factory",
          "description": "The factory function that calls the promise.",
          "kind": "function",
          "params": [],
          "returns": {
            "type": "Promise",
            "generics": [
              {
                "type": "P"
              }
            ]
          }
        },
        {
          "name": "deps",
          "description": "The dependencies.",
          "optional": true,
          "kind": "array",
          "items": {
            "type": "any"
          }
        }
      ],
      "returns": {
        "description": "The resolved value.",
        "kind": "array",
        "items": [
          {
            "type": "P"
          },
          {
            "type": "Error"
          }
        ]
      },
      "examples": [
        "import { usePromise } from '@nebula.js/stardust';\nimport { useModel } from '@nebula.js/stardust';\n// ...\nconst model = useModel();\nconst [resolved, rejected] = usePromise(() => model.getLayout(), []);"
      ]
    },
    "useElement": {
      "description": "Gets the HTMLElement this visualization is rendered into.",
      "kind": "function",
      "params": [],
      "returns": {
        "type": "HTMLElement"
      },
      "examples": [
        "import { useElement } from '@nebula.js/stardust';\n// ...\nconst el = useElement();\nel.innerHTML = 'Hello!';"
      ]
    },
    "useRect": {
      "description": "Gets the size of the HTMLElement the visualization is rendered into.",
      "kind": "function",
      "params": [],
      "returns": {
        "description": "The size of the element.",
        "type": "#/definitions/Rect"
      },
      "examples": [
        "import { useRect } from '@nebula.js/stardust';\n// ...\nconst rect = useRect();\nuseEffect(() => {\n  console.log('resize');\n}, [rect.width, rect.height])"
      ]
    },
    "useLayout": {
      "description": "Gets the layout of the generic object associated with this visualization.",
      "kind": "function",
      "params": [],
      "returns": {
        "type": "qae.GenericObjectLayout"
      },
      "examples": [
        "import { useLayout } from '@nebula.js/stardust';\n// ...\nconst layout = useLayout();\nconsole.log(layout);"
      ]
    },
    "useStaleLayout": {
      "description": "Gets the layout of the generic object associated with this visualization.\n\nUnlike the regular layout, a _stale_ layout is not changed when a generic object enters\nthe modal state. This is mostly notable in that `qSelectionInfo.qInSelections` in the layout is\nalways `false`.\nThe returned value from `useStaleLayout()` and `useLayout()` are identical when the object\nis not in a modal state.",
      "kind": "function",
      "params": [],
      "returns": {
        "type": "qae.GenericObjectLayout"
      },
      "examples": [
        "import { useStaleLayout } from '@nebula.js/stardust';\n// ...\nconst staleLayout = useStaleLayout();\nconsole.log(staleLayout);"
      ]
    },
    "useAppLayout": {
      "description": "Gets the layout of the app associated with this visualization.",
      "kind": "function",
      "params": [],
      "returns": {
        "description": "The app layout",
        "type": "qae.NxAppLayout"
      },
      "examples": [
        "import { useAppLayout } from '@nebula.js/stardust';\n// ...\nconst appLayout = useAppLayout();\nconsole.log(appLayout.qLocaleInfo);"
      ]
    },
    "useModel": {
      "description": "Gets the generic object API of the generic object connected to this visualization.",
      "kind": "function",
      "params": [],
      "returns": {
        "kind": "union",
        "items": [
          {
            "type": "enigma.GenericObject"
          },
          {
            "type": "undefined"
          }
        ]
      },
      "examples": [
        "import { useModel } from '@nebula.js/stardust';\n// ...\nconst model = useModel();\nuseEffect(() => {\n  model.getInfo().then(info => {\n    console.log(info);\n  })\n}, []);"
      ]
    },
    "useApp": {
      "description": "Gets the doc API.",
      "kind": "function",
      "params": [],
      "returns": {
        "description": "The doc API.",
        "kind": "union",
        "items": [
          {
            "type": "enigma.Doc"
          },
          {
            "type": "undefined"
          }
        ]
      },
      "examples": [
        "import { useApp } from '@nebula.js/stardust';\n// ...\nconst app = useApp();\nuseEffect(() => {\n  app.getAllInfos().then(infos => {\n    console.log(infos);\n  })\n}, []);"
      ]
    },
    "useGlobal": {
      "description": "Gets the global API.",
      "kind": "function",
      "params": [],
      "returns": {
        "description": "The global API.",
        "kind": "union",
        "items": [
          {
            "type": "enigma.Global"
          },
          {
            "type": "undefined"
          }
        ]
      },
      "examples": [
        "import { useGlobal } from '@nebula.js/stardust';\n\n// ...\nconst g = useGlobal();\nuseEffect(() => {\n  g.engineVersion().then(version => {\n    console.log(version);\n  })\n}, []);"
      ]
    },
    "useSelections": {
      "description": "Gets the object selections.",
      "kind": "function",
      "params": [],
      "returns": {
        "description": "The object selections.",
        "type": "#/definitions/ObjectSelections"
      },
      "examples": [
        "import { useSelections } from '@nebula.js/stardust';\nimport { useElement } from '@nebula.js/stardust';\nimport { useEffect } from '@nebula.js/stardust';\n// ...\nconst selections = useSelections();\nconst element = useElement();\nuseEffect(() => {\n  const onClick = () => {\n    selections.begin('/qHyperCubeDef');\n  };\n  element.addEventListener('click', onClick);\n  return () => {\n    element.removeEventListener('click', onClick);\n  };\n}, []);"
      ]
    },
    "useTheme": {
      "description": "Gets the theme.",
      "kind": "function",
      "params": [],
      "returns": {
        "description": "The theme.",
        "type": "#/definitions/Theme"
      },
      "examples": [
        "import { useTheme } from '@nebula.js/stardust';\n\nconst theme = useTheme();\nconsole.log(theme.getContrastinColorTo('#ff0000'));"
      ]
    },
    "useTranslator": {
      "description": "Gets the translator.",
      "kind": "function",
      "params": [],
      "returns": {
        "description": "The translator.",
        "type": "#/definitions/Translator"
      },
      "examples": [
        "import { useTranslator } from '@nebula.js/stardust';\n// ...\nconst translator = useTranslator();\nconsole.log(translator.get('SomeString'));"
      ]
    },
    "useDeviceType": {
      "description": "Gets the device type. ('touch' or 'desktop')",
      "kind": "function",
      "params": [],
      "returns": {
        "description": "device type.",
        "type": "string"
      },
      "examples": [
        "import { useDeviceType } from '@nebula.js/stardust';\n// ...\nconst deviceType = useDeviceType();\nif (deviceType === 'touch') { ... };"
      ]
    },
    "usePlugins": {
      "description": "Gets the array of plugins provided when rendering the visualization.",
      "kind": "function",
      "params": [],
      "returns": {
        "description": "array of plugins.",
        "kind": "array",
        "items": {
          "type": "#/definitions/Plugin"
        }
      },
      "examples": [
        "// provide plugins that can be used when rendering\nembed(app).render({\n  element,\n  type: 'my-chart',\n  plugins: [plugin]\n});",
        "// It's up to the chart implementation to make use of plugins in any way\nimport { usePlugins } from '@nebula.js/stardust';\n// ...\nconst plugins = usePlugins();\nplugins.forEach((plugin) => {\n  // Invoke plugin\n  plugin.fn();\n});"
      ]
    },
    "useAction": {
      "description": "Registers a custom action.",
      "templates": [
        {
          "name": "A"
        }
      ],
      "kind": "function",
      "params": [
        {
          "name": "factory",
          "kind": "function",
          "params": [],
          "returns": {
            "type": "#/definitions/ActionDefinition",
            "generics": [
              {
                "type": "A"
              }
            ]
          }
        },
        {
          "name": "deps",
          "optional": true,
          "kind": "array",
          "items": {
            "type": "any"
          }
        }
      ],
      "returns": {
        "type": "A"
      },
      "examples": [
        "import { useAction } from '@nebula.js/stardust';\n// ...\nconst [zoomed, setZoomed] = useState(false);\nconst act = useAction(() => ({\n  hidden: false,\n  disabled: zoomed,\n  action() {\n    setZoomed(prev => !prev);\n  },\n  icon: {}\n}), [zoomed]);"
      ]
    },
    "useConstraints": {
      "description": "Gets the desired constraints that should be applied when rendering the visualization.\n\nThe constraints are set on the embed configuration before the visualization is rendered\nand should respected by you when implementing the visualization.",
      "kind": "function",
      "params": [],
      "returns": {
        "type": "#/definitions/Constraints"
      },
      "examples": [
        "// configure embed to disallow active interactions when rendering\nembed(app, {\n  constraints: {\n    active: true, // do not allow interactions\n  }\n}).render({ element, id: 'sdfsdf' });",
        "import { useConstraints } from '@nebula.js/stardust';\n// ...\nconst constraints = useConstraints();\nuseEffect(() => {\n  if (constraints.active) {\n    // do not add any event listener if active constraint is set\n    return undefined;\n  }\n  const listener = () => {};\n  element.addEventListener('click', listener);\n  return () => {\n    element.removeEventListener('click', listener);\n  };\n}, [constraints])"
      ]
    },
    "useOptions": {
      "description": "Gets the options object provided when rendering the visualization.\n\nThis is an empty object by default but enables customization of the visualization through this object.\nOptions are different from setting properties on the generic object in that options\nare only temporary settings applied to the visualization when rendered.\n\nYou have the responsibility to provide documentation of the options you support, if any.",
      "kind": "function",
      "params": [],
      "returns": {
        "type": "object"
      },
      "examples": [
        "// when embedding the visualization, anything can be set in options\nembed(app).render({\n  element,\n  type: 'my-chart',\n  options: {\n    showNavigation: true,\n  }\n});",
        "// it is up to you use and implement the provided options\nimport { useOptions } from '@nebula.js/stardust';\nimport { useEffect } from '@nebula.js/stardust';\n// ...\nconst options = useOptions();\nuseEffect(() => {\n  if (!options.showNavigation) {\n    // hide navigation\n  } else {\n    // show navigation\n  }\n}, [options.showNavigation]);"
      ]
    },
    "onTakeSnapshot": {
      "description": "Registers a callback that is called when a snapshot is taken.",
      "kind": "function",
      "params": [
        {
          "name": "snapshotCallback",
          "kind": "function",
          "params": [
            {
              "type": "qae.GenericObjectLayout"
            }
          ],
          "returns": {
            "type": "Promise",
            "generics": [
              {
                "type": "qae.GenericObjectLayout"
              }
            ]
          }
        }
      ],
      "examples": [
        "import { onTakeSnapshot } from '@nebula.js/stardust';\nimport { useState } from '@nebula.js/stardust';\nimport { useLayout } from '@nebula.js/stardust';\n\nconst layout = useLayout();\nconst [zoomed] = useState(layout.isZoomed || false);\n\nonTakeSnapshot((copyOfLayout) => {\n  copyOfLayout.isZoomed = zoomed;\n  return Promise.resolve(copyOfLayout);\n});"
      ]
    }
  },
  "definitions": {
    "Context": {
      "kind": "interface",
      "entries": {
        "constraints": {
          "optional": true,
          "kind": "object",
          "entries": {
            "active": {
              "optional": true,
              "type": "boolean"
            },
            "passive": {
              "optional": true,
              "type": "boolean"
            },
            "select": {
              "optional": true,
              "type": "boolean"
            }
          }
        },
        "theme": {
          "optional": true,
          "defaultValue": "light",
          "type": "string"
        },
        "language": {
          "optional": true,
          "defaultValue": "en-US",
          "type": "string"
        },
        "deviceType": {
          "optional": true,
          "defaultValue": "auto",
          "type": "string"
        }
      }
    },
    "Configuration": {
      "kind": "interface",
      "entries": {
        "context": {
          "optional": true,
          "type": "#/definitions/Context"
        },
        "types": {
          "optional": true,
          "kind": "array",
          "items": {
            "type": "#/definitions/TypeInfo"
          }
        },
        "themes": {
          "optional": true,
          "kind": "array",
          "items": {
            "type": "#/definitions/ThemeInfo"
          }
        },
        "anything": {
          "optional": true,
          "type": "object"
        }
      }
    },
    "Galaxy": {
      "kind": "interface",
      "entries": {
        "translator": {
          "type": "#/definitions/Translator"
        },
        "flags": {
          "type": "#/definitions/Flags"
        },
        "deviceType": {
          "type": "string"
        },
        "anything": {
          "type": "object"
        }
      }
    },
    "Embed": {
      "kind": "class",
      "constructor": {
        "kind": "function",
        "params": []
      },
      "entries": {
        "render": {
          "description": "Renders a visualization into an HTMLElement.",
          "kind": "function",
          "params": [
            {
              "name": "cfg",
              "description": "The render configuration.",
              "kind": "union",
              "items": [
                {
                  "type": "#/definitions/CreateConfig"
                },
                {
                  "type": "#/definitions/GetConfig"
                }
              ]
            }
          ],
          "returns": {
            "description": "A controller to the rendered visualization.",
            "type": "Promise",
            "generics": [
              {
                "type": "#/definitions/Viz"
              }
            ]
          },
          "examples": [
            "// render from existing object\nn.render({\n  element: el,\n  id: 'abcdef'\n});",
            "// render on the fly\nn.render({\n  element: el,\n  type: 'barchart',\n  fields: ['Product', { qLibraryId: 'u378hn', type: 'measure' }]\n});"
          ]
        },
        "context": {
          "description": "Updates the current context of this embed instance.\nUse this when you want to change some part of the current context, like theme.",
          "kind": "function",
          "params": [
            {
              "name": "ctx",
              "description": "The context to update.",
              "type": "#/definitions/Context"
            }
          ],
          "returns": {
            "type": "Promise",
            "generics": [
              {
                "type": "undefined"
              }
            ]
          },
          "examples": [
            "// change theme\nn.context({ theme: 'dark'});",
            "// limit constraints\nn.context({ constraints: { active: true } });"
          ]
        },
        "selections": {
          "description": "Gets the app selections of this instance.",
          "kind": "function",
          "params": [],
          "returns": {
            "type": "Promise",
            "generics": [
              {
                "type": "#/definitions/AppSelections"
              }
            ]
          },
          "examples": ["const selections = await n.selections();\nselections.mount(element);"]
        },
        "field": {
          "description": "Gets the listbox instance of the specified field",
          "stability": "experimental",
          "availability": {
            "since": "1.1.0"
          },
          "kind": "function",
          "params": [
            {
              "name": "fieldIdentifier",
              "description": "Fieldname as a string or a Library dimension",
              "kind": "union",
              "items": [
                {
                  "type": "string"
                },
                {
                  "type": "#/definitions/LibraryField"
                }
              ]
            }
          ],
          "returns": {
            "type": "Promise",
            "generics": [
              {
                "type": "#/definitions/FieldInstance"
              }
            ]
          },
          "examples": [
            "const fieldInstance = await n.field(\"MyField\");\nfieldInstance.mount(element, { title: \"Hello Field\"});"
          ]
        }
      }
    },
    "FieldInstance": {
      "stability": "experimental",
      "availability": {
        "since": "1.1.0"
      },
      "kind": "class",
      "constructor": {
        "kind": "function",
        "params": []
      },
      "entries": {},
      "staticEntries": {
        "mount": {
          "description": "Mounts the field as a listbox into the provided HTMLElement.",
          "stability": "experimental",
          "availability": {
            "since": "1.1.0"
          },
          "kind": "function",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement"
            },
            {
              "name": "options",
              "description": "Settings for the embedded listbox",
              "optional": true,
              "kind": "object",
              "entries": {
                "title": {
                  "description": "Custom title, defaults to fieldname",
                  "optional": true,
                  "type": "string"
                },
                "direction": {
                  "description": "Direction setting ltr|rtl.",
                  "optional": true,
                  "defaultValue": "ltr",
                  "type": "string"
                },
                "listLayout": {
                  "description": "Layout direction vertical|horizontal",
                  "optional": true,
                  "defaultValue": "vertical",
                  "type": "string"
                },
                "search": {
                  "description": "To show the search bar",
                  "optional": true,
                  "defaultValue": true,
                  "type": "boolean"
                },
                "stateName": {
                  "description": "Sets the state to make selections in",
                  "optional": true,
                  "defaultValue": false,
                  "type": "boolean"
                }
              }
            }
          ],
          "examples": ["fieldInstance.mount(element);"]
        },
        "unmount": {
          "description": "Unmounts the field listbox from the DOM.",
          "stability": "experimental",
          "availability": {
            "since": "1.1.0"
          },
          "kind": "function",
          "params": [],
          "examples": ["listbox.unmount();"]
        }
      }
    },
    "ThemeInfo": {
      "kind": "interface",
      "entries": {
        "id": {
          "description": "Theme identifier",
          "type": "string"
        },
        "load": {
          "description": "A function that should return a Promise that resolves to a raw JSON theme.",
          "kind": "function",
          "params": [],
          "returns": {
            "type": "Promise",
            "generics": [
              {
                "type": "ThemeJSON"
              }
            ]
          }
        }
      }
    },
    "Viz": {
      "description": "A controller to further modify a visualization after it has been rendered.",
      "kind": "class",
      "constructor": {
        "kind": "function",
        "params": []
      },
      "entries": {
        "id": {
          "description": "The id of this visualization's generic object.",
          "type": "string"
        },
        "destroy": {
          "description": "Destroys the visualization and removes it from the the DOM.",
          "kind": "function",
          "params": [],
          "examples": ["const viz = await embed(app).render({\n  element,\n  id: 'abc'\n});\nviz.destroy();"]
        },
        "convertTo": {
          "description": "Converts the visualization to a different registered type",
          "stability": "experimental",
          "availability": {
            "since": "1.1.0"
          },
          "kind": "function",
          "params": [
            {
              "name": "newType",
              "description": "Which registered type to convert to.",
              "type": "string"
            },
            {
              "name": "forceUpdate",
              "description": "Whether to run setProperties or not, defaults to true.",
              "optional": true,
              "type": "boolean"
            }
          ],
          "returns": {
            "description": "Promise object that resolves to the full property tree of the converted visualization.",
            "type": "Promise",
            "generics": [
              {
                "type": "object"
              }
            ]
          },
          "examples": [
            "const viz = await embed(app).render({\n  element,\n  id: 'abc'\n});\nviz.convertTo('barChart');"
          ]
        }
      },
      "examples": ["const viz = await embed(app).render({\n  element,\n  type: 'barchart'\n});\nviz.destroy();"]
    },
    "Flags": {
      "kind": "interface",
      "entries": {
        "isEnabled": {
          "description": "Checks whether the specified flag is enabled.",
          "kind": "function",
          "params": [
            {
              "name": "flag",
              "description": "The value flag to check.",
              "type": "string"
            }
          ],
          "returns": {
            "description": "True if the specified flag is enabled, false otherwise.",
            "type": "boolean"
          }
        }
      }
    },
    "AppSelections": {
      "kind": "class",
      "constructor": {
        "kind": "function",
        "params": []
      },
      "entries": {
        "mount": {
          "description": "Mounts the app selection UI into the provided HTMLElement.",
          "kind": "function",
          "params": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "examples": ["selections.mount(element);"]
        },
        "unmount": {
          "description": "Unmounts the app selection UI from the DOM.",
          "kind": "function",
          "params": [],
          "examples": ["selections.unmount();"]
        }
      }
    },
    "ObjectSelections": {
      "kind": "class",
      "constructor": {
        "kind": "function",
        "params": []
      },
      "entries": {
        "begin": {
          "kind": "function",
          "params": [
            {
              "name": "paths",
              "kind": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": {
            "type": "Promise",
            "generics": [
              {
                "type": "undefined"
              }
            ]
          }
        },
        "clear": {
          "kind": "function",
          "params": [],
          "returns": {
            "type": "Promise",
            "generics": [
              {
                "type": "undefined"
              }
            ]
          }
        },
        "confirm": {
          "kind": "function",
          "params": [],
          "returns": {
            "type": "Promise",
            "generics": [
              {
                "type": "undefined"
              }
            ]
          }
        },
        "cancel": {
          "kind": "function",
          "params": [],
          "returns": {
            "type": "Promise",
            "generics": [
              {
                "type": "undefined"
              }
            ]
          }
        },
        "select": {
          "kind": "function",
          "params": [
            {
              "name": "s",
              "kind": "object",
              "entries": {
                "method": {
                  "type": "string"
                },
                "params": {
                  "kind": "array",
                  "items": {
                    "type": "any"
                  }
                }
              }
            }
          ],
          "returns": {
            "type": "Promise",
            "generics": [
              {
                "type": "boolean"
              }
            ]
          }
        },
        "canClear": {
          "kind": "function",
          "params": [],
          "returns": {
            "type": "boolean"
          }
        },
        "canConfirm": {
          "kind": "function",
          "params": [],
          "returns": {
            "type": "boolean"
          }
        },
        "canCancel": {
          "kind": "function",
          "params": [],
          "returns": {
            "type": "boolean"
          }
        },
        "isActive": {
          "kind": "function",
          "params": [],
          "returns": {
            "type": "boolean"
          }
        },
        "isModal": {
          "kind": "function",
          "params": [],
          "returns": {
            "type": "boolean"
          }
        },
        "goModal": {
          "kind": "function",
          "params": [
            {
              "name": "paths",
              "kind": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": {
            "type": "Promise",
            "generics": [
              {
                "type": "undefined"
              }
            ]
          }
        },
        "noModal": {
          "kind": "function",
          "params": [
            {
              "name": "accept",
              "optional": true,
              "defaultValue": false,
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "Promise",
            "generics": [
              {
                "type": "undefined"
              }
            ]
          }
        }
      }
    },
    "Field": {
      "kind": "alias",
      "items": {
        "kind": "union",
        "items": [
          {
            "type": "string"
          },
          {
            "type": "qae.NxDimension"
          },
          {
            "type": "qae.NxMeasure"
          },
          {
            "type": "#/definitions/LibraryField"
          }
        ]
      }
    },
    "CreateConfig": {
      "description": "Rendering configuration for creating and rendering a new object",
      "extends": [
        {
          "type": "#/definitions/BaseConfig"
        }
      ],
      "kind": "interface",
      "entries": {
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "fields": {
          "optional": true,
          "kind": "union",
          "items": [
            {
              "kind": "array",
              "items": {
                "type": "#/definitions/Field"
              }
            }
          ]
        },
        "properties": {
          "optional": true,
          "type": "qae.GenericObjectProperties"
        }
      }
    },
    "BaseConfig": {
      "description": "Basic rendering configuration for rendering an object",
      "kind": "interface",
      "entries": {
        "element": {
          "type": "HTMLElement"
        },
        "options": {
          "optional": true,
          "type": "object"
        },
        "plugins": {
          "optional": true,
          "kind": "array",
          "items": {
            "type": "#/definitions/Plugin"
          }
        }
      }
    },
    "GetConfig": {
      "description": "Rendering configuration for rendering an existing object",
      "extends": [
        {
          "type": "#/definitions/BaseConfig"
        }
      ],
      "kind": "interface",
      "entries": {
        "id": {
          "type": "string"
        }
      }
    },
    "LibraryField": {
      "kind": "interface",
      "entries": {
        "qLibraryId": {
          "type": "string"
        },
        "type": {
          "kind": "union",
          "items": [
            {
              "kind": "literal",
              "value": "'dimension'"
            },
            {
              "kind": "literal",
              "value": "'measure'"
            }
          ]
        }
      }
    },
    "Plugin": {
      "description": "An object literal containing meta information about the plugin and a function containing the plugin implementation.",
      "stability": "experimental",
      "availability": {
        "since": "1.2.0"
      },
      "kind": "interface",
      "entries": {
        "info": {
          "description": "Object that can hold various meta info about the plugin",
          "kind": "object",
          "entries": {
            "name": {
              "description": "The name of the plugin",
              "type": "string"
            }
          }
        },
        "fn": {
          "description": "The implementation of the plugin. Input and return value is up to the plugin implementation to decide based on its purpose.",
          "type": "function"
        }
      },
      "examples": [
        "const plugin = {\n  info: {\n    name: \"example-plugin\",\n    type: \"meta-type\",\n  },\n  fn: () => {\n    // Plugin implementation goes here\n  }\n};"
      ]
    },
    "LoadType": {
      "kind": "interface",
      "params": [
        {
          "name": "type",
          "kind": "object",
          "entries": {
            "name": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          }
        }
      ],
      "returns": {
        "type": "Promise",
        "generics": [
          {
            "type": "#/definitions/Visualization"
          }
        ]
      },
      "entries": {}
    },
    "TypeInfo": {
      "kind": "interface",
      "entries": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "load": {
          "type": "#/definitions/LoadType"
        },
        "meta": {
          "optional": true,
          "type": "object"
        }
      }
    },
    "CellElement": {
      "extends": [
        {
          "type": "HTMLElement"
        }
      ],
      "kind": "interface",
      "entries": {
        "className": {
          "value": "'njs-cell'",
          "kind": "literal"
        }
      }
    },
    "VizElement": {
      "extends": [
        {
          "type": "HTMLElement"
        }
      ],
      "kind": "interface",
      "entries": {
        "attributes": {
          "kind": "object",
          "entries": {
            "data-render-count": {
              "type": "string"
            }
          }
        },
        "className": {
          "value": "'njs-viz'",
          "kind": "literal"
        }
      }
    },
    "Visualization": {
      "description": "The entry point for defining a visualization.",
      "kind": "interface",
      "params": [
        {
          "name": "galaxy",
          "type": "#/definitions/Galaxy"
        }
      ],
      "returns": {
        "type": "#/definitions/VisualizationDefinition"
      },
      "entries": {},
      "examples": [
        "import { useElement, useLayout } from '@nebula.js/stardust';\n\nexport default function() {\n  return {\n    qae: {\n      properties: {\n        dude: 'Heisenberg',\n      }\n    },\n    component() {\n      const el = useElement();\n      const layout = useLayout();\n      el.innerHTML = `What's my name? ${layout.dude}!!!`;\n    }\n  };\n}"
      ]
    },
    "VisualizationDefinition": {
      "kind": "interface",
      "entries": {
        "qae": {
          "type": "#/definitions/QAEDefinition"
        },
        "component": {
          "kind": "function",
          "params": [],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "SetStateFn": {
      "templates": [
        {
          "name": "S"
        }
      ],
      "kind": "interface",
      "params": [
        {
          "name": "newState",
          "description": "The new state",
          "kind": "union",
          "items": [
            {
              "type": "S"
            },
            {
              "kind": "function",
              "params": [
                {
                  "type": "S"
                }
              ],
              "returns": {
                "type": "S"
              }
            }
          ]
        }
      ],
      "entries": {}
    },
    "EffectCallback": {
      "kind": "alias",
      "items": {
        "kind": "function",
        "params": [],
        "returns": {
          "kind": "union",
          "items": [
            {
              "type": "void"
            },
            {
              "kind": "function",
              "params": [],
              "returns": {
                "type": "void"
              }
            }
          ]
        }
      }
    },
    "Rect": {
      "kind": "interface",
      "entries": {
        "top": {
          "type": "number"
        },
        "left": {
          "type": "number"
        },
        "width": {
          "type": "number"
        },
        "height": {
          "type": "number"
        }
      }
    },
    "ActionDefinition": {
      "templates": [
        {
          "name": "A"
        }
      ],
      "kind": "interface",
      "entries": {
        "action": {
          "type": "A"
        },
        "hidden": {
          "optional": true,
          "type": "boolean"
        },
        "disabled": {
          "optional": true,
          "type": "boolean"
        },
        "icon": {
          "optional": true,
          "kind": "object",
          "entries": {
            "viewBox": {
              "optional": true,
              "defaultValue": "\"0 0 16 16\"",
              "type": "string"
            },
            "shapes": {
              "kind": "array",
              "items": {
                "entries": {
                  "type": {
                    "type": "string"
                  },
                  "attrs": {
                    "optional": true,
                    "type": "object"
                  }
                },
                "kind": "object"
              }
            }
          }
        }
      }
    },
    "Constraints": {
      "kind": "interface",
      "entries": {
        "passive": {
          "optional": true,
          "type": "boolean"
        },
        "active": {
          "optional": true,
          "type": "boolean"
        },
        "select": {
          "optional": true,
          "type": "boolean"
        }
      }
    },
    "importProperties": {
      "description": "Imports properties for a chart with a hypercube.",
      "stability": "experimental",
      "availability": {
        "since": "1.1.0"
      },
      "kind": "function",
      "params": [
        {
          "name": "args",
          "kind": "object",
          "entries": {
            "exportFormat": {
              "description": "The export object which is the output of exportProperties.",
              "type": "#/definitions/ExportFormat"
            },
            "initialProperties": {
              "description": "Initial properties of the target chart.",
              "optional": true,
              "type": "Object"
            },
            "dataDefinition": {
              "description": "Data definition of the target chart.",
              "optional": true,
              "type": "Object"
            },
            "defaultPropertyValues": {
              "description": "Default values for a number of properties of the target chart.",
              "optional": true,
              "type": "Object"
            },
            "hypercubePath": {
              "description": "Reference to the qHyperCubeDef.",
              "type": "string"
            }
          }
        }
      ],
      "returns": {
        "description": "A properties tree",
        "type": "Object"
      }
    },
    "exportProperties": {
      "description": "Exports properties for a chart with a hypercube.",
      "stability": "experimental",
      "availability": {
        "since": "1.1.0"
      },
      "kind": "function",
      "params": [
        {
          "name": "args",
          "kind": "object",
          "entries": {
            "propertyTree": {
              "type": "Object"
            },
            "hypercubePath": {
              "description": "Reference to the qHyperCubeDef.",
              "type": "string"
            }
          }
        }
      ],
      "returns": {
        "type": "#/definitions/ExportFormat"
      }
    },
    "QAEDefinition": {
      "kind": "interface",
      "entries": {
        "properties": {
          "optional": true,
          "type": "qae.GenericObjectProperties"
        },
        "data": {
          "optional": true,
          "kind": "object",
          "entries": {
            "targets": {
              "kind": "array",
              "items": {
                "type": "#/definitions/DataTarget"
              }
            }
          }
        },
        "importProperties": {
          "optional": true,
          "type": "#/definitions/importProperties"
        },
        "exportProperties": {
          "optional": true,
          "type": "#/definitions/exportProperties"
        }
      }
    },
    "DataTarget": {
      "kind": "interface",
      "entries": {
        "path": {
          "type": "string"
        },
        "dimensions": {
          "optional": true,
          "type": "#/definitions/FieldTarget",
          "generics": [
            {
              "type": "qae.NxDimension"
            }
          ]
        },
        "measures": {
          "optional": true,
          "type": "#/definitions/FieldTarget",
          "generics": [
            {
              "type": "qae.NxMeasure"
            }
          ]
        }
      }
    },
    "FieldTarget": {
      "templates": [
        {
          "name": "T"
        }
      ],
      "kind": "interface",
      "entries": {
        "min": {
          "optional": true,
          "kind": "function",
          "params": [],
          "returns": {
            "type": "number"
          }
        },
        "max": {
          "optional": true,
          "kind": "function",
          "params": [],
          "returns": {
            "type": "number"
          }
        },
        "added": {
          "optional": true,
          "kind": "function",
          "params": [
            {
              "type": "T"
            },
            {
              "type": "qae.GenericObjectProperties"
            }
          ]
        },
        "removed": {
          "optional": true,
          "kind": "function",
          "params": [
            {
              "type": "T"
            },
            {
              "type": "qae.GenericObjectProperties"
            },
            {
              "type": "number"
            }
          ]
        }
      }
    },
    "Translator": {
      "kind": "class",
      "constructor": {
        "kind": "function",
        "params": []
      },
      "entries": {
        "add": {
          "description": "Registers a string in multiple locales",
          "kind": "function",
          "params": [
            {
              "name": "item",
              "kind": "object",
              "entries": {
                "id": {
                  "type": "string"
                },
                "locale": {
                  "type": "object",
                  "generics": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              }
            }
          ],
          "examples": [
            "translator.add({\n  id: 'company.hello_user',\n  locale: {\n    'en-US': 'Hello {0}',\n    'sv-SE': 'Hej {0}'\n  }\n});\ntranslator.get('company.hello_user', ['John']); // Hello John"
          ]
        },
        "get": {
          "description": "Translates a string for current locale.",
          "kind": "function",
          "params": [
            {
              "name": "str",
              "description": "ID of the registered string.",
              "type": "string"
            },
            {
              "name": "args",
              "description": "Values passed down for string interpolation.",
              "optional": true,
              "kind": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "returns": {
            "description": "The translated string.",
            "type": "string"
          }
        }
      }
    },
    "Theme": {
      "kind": "class",
      "constructor": {
        "kind": "function",
        "params": []
      },
      "entries": {
        "getDataColorScales": {
          "kind": "function",
          "params": [],
          "returns": {
            "kind": "array",
            "items": {
              "type": "#/definitions/Theme/definitions/ScalePalette"
            }
          }
        },
        "getDataColorPalettes": {
          "kind": "function",
          "params": [],
          "returns": {
            "kind": "array",
            "items": {
              "type": "#/definitions/Theme/definitions/DataPalette"
            }
          }
        },
        "getDataColorPickerPalettes": {
          "kind": "function",
          "params": [],
          "returns": {
            "kind": "array",
            "items": {
              "type": "#/definitions/Theme/definitions/ColorPickerPalette"
            }
          }
        },
        "getDataColorSpecials": {
          "kind": "function",
          "params": [],
          "returns": {
            "type": "#/definitions/Theme/definitions/DataColorSpecials"
          }
        },
        "getColorPickerColor": {
          "description": "Resolve a color object using the color picker palette from the provided JSON theme.",
          "kind": "function",
          "params": [
            {
              "name": "c",
              "kind": "object",
              "entries": {
                "index": {
                  "optional": true,
                  "type": "number"
                },
                "color": {
                  "optional": true,
                  "type": "string"
                }
              }
            }
          ],
          "returns": {
            "description": "The resolved color.",
            "type": "string"
          },
          "examples": ["theme.getColorPickerColor({ index: 1 });\ntheme.getColorPickerColor({ color: 'red' });"]
        },
        "getContrastingColorTo": {
          "description": "Get the best contrasting color against the specified `color`.\nThis is typically used to find a suitable text color for a label placed on an arbitrarily colored background.\n\nThe returned colors are derived from the theme.",
          "kind": "function",
          "params": [
            {
              "name": "color",
              "description": "A color to measure the contrast against",
              "type": "string"
            }
          ],
          "returns": {
            "description": "- The color that has the best contrast against the specified `color`.",
            "type": "string"
          },
          "examples": ["theme.getContrastingColorTo('#400');"]
        },
        "getStyle": {
          "description": "Get the value of a style attribute in the theme by searching in the theme's JSON structure.\nThe search starts at the specified base path and continues upwards until the value is found.\nIf possible it will get the attribute's value using the given path.",
          "kind": "function",
          "params": [
            {
              "name": "basePath",
              "description": "Base path in the theme's JSON structure to start the search in (specified as a name path separated by dots).",
              "type": "string"
            },
            {
              "name": "path",
              "description": "Expected path for the attribute (specified as a name path separated by dots).",
              "type": "string"
            },
            {
              "name": "attribute",
              "description": "Name of the style attribute.",
              "type": "string"
            }
          ],
          "returns": {
            "description": "The style value",
            "type": "string"
          },
          "examples": ["theme.getStyle('object', 'title.main', 'fontSize'));\ntheme.getStyle('', '', 'fontSize'));"]
        }
      },
      "definitions": {
        "ScalePalette": {
          "kind": "interface",
          "entries": {
            "key": {
              "type": "string"
            },
            "type": {
              "kind": "union",
              "items": [
                {
                  "kind": "literal",
                  "value": "'gradient'"
                },
                {
                  "kind": "literal",
                  "value": "'class-pyramid'"
                }
              ]
            },
            "colors": {
              "kind": "union",
              "items": [
                {
                  "kind": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "kind": "array",
                  "items": {
                    "kind": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        },
        "DataPalette": {
          "kind": "interface",
          "entries": {
            "key": {
              "type": "string"
            },
            "type": {
              "kind": "union",
              "items": [
                {
                  "kind": "literal",
                  "value": "'pyramid'"
                },
                {
                  "kind": "literal",
                  "value": "'row'"
                }
              ]
            },
            "colors": {
              "kind": "union",
              "items": [
                {
                  "kind": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "kind": "array",
                  "items": {
                    "kind": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        },
        "ColorPickerPalette": {
          "kind": "interface",
          "entries": {
            "key": {
              "type": "string"
            },
            "colors": {
              "kind": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "DataColorSpecials": {
          "kind": "interface",
          "entries": {
            "primary": {
              "type": "string"
            },
            "nil": {
              "type": "string"
            },
            "others": {
              "type": "string"
            }
          }
        }
      }
    },
    "ExportFormat": {
      "description": "Used for exporting and importing properties between backend models. An object that exports to\nExportFormat should put dimensions and measures inside one data group. If an object has two hypercubes,\neach of the cubes should export dimensions and measures in two separate data groups.\nAn object that imports from this structure is responsible for putting the existing properties where they should be\nin the new model.",
      "stability": "experimental",
      "availability": {
        "since": "1.1.0"
      },
      "kind": "interface",
      "entries": {
        "data": {
          "optional": true,
          "kind": "union",
          "items": [
            {
              "kind": "array",
              "items": {
                "type": "#/definitions/ExportDataDef"
              }
            }
          ]
        },
        "properties": {
          "optional": true,
          "type": "object"
        }
      }
    },
    "ExportDataDef": {
      "stability": "experimental",
      "availability": {
        "since": "1.1.0"
      },
      "kind": "interface",
      "entries": {
        "dimensions": {
          "kind": "array",
          "items": {
            "type": "qae.NxDimension"
          }
        },
        "measures": {
          "kind": "array",
          "items": {
            "type": "qae.NxMeasure"
          }
        },
        "excludedDimensions": {
          "kind": "array",
          "items": {
            "type": "qae.NxDimension"
          }
        },
        "excludedMeasures": {
          "kind": "array",
          "items": {
            "type": "qae.NxMeasure"
          }
        },
        "interColumnSortOrder": {
          "kind": "array",
          "items": {
            "type": "number"
          }
        }
      }
    },
    "ConversionType": {
      "stability": "experimental",
      "availability": {
        "since": "1.1.0"
      },
      "kind": "interface",
      "entries": {
        "importProperties": {
          "type": "#/definitions/importProperties"
        },
        "exportProperties": {
          "type": "#/definitions/exportProperties"
        }
      }
    },
    "Conversion": {
      "description": "Provides conversion functionality to extensions.",
      "stability": "experimental",
      "availability": {
        "since": "1.1.0"
      },
      "kind": "interface",
      "entries": {
        "hypercube": {
          "description": "Provides conversion functionality to extensions with hyperCubes.",
          "stability": "experimental",
          "availability": {
            "since": "1.1.0"
          },
          "type": "#/definitions/hyperCubeConversion"
        }
      },
      "examples": [
        "import { conversion } from '@nebula.js/stardust';\n\nexport default function() {\n  return {\n    qae: {\n      ...\n      importProperties: ( exportFormat, initialProperties ) =>  conversion.hyperCube.importProperties(exportFormat, initialProperties),\n      exportProperties: ( fullPropertyTree ) => conversion.hyperCube.exportProperties(fullPropertyTree)\n    },\n    ...\n  };\n}"
      ]
    },
    "hyperCubeConversion": {
      "stability": "experimental",
      "availability": {
        "since": "1.1.0"
      },
      "implements": [
        {
          "type": "#/definitions/ConversionType"
        }
      ],
      "kind": "interface",
      "entries": {}
    }
  }
}
